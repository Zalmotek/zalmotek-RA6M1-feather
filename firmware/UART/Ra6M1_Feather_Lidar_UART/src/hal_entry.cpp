#include "SerialCompatibility.h"

FSP_CPP_HEADER
void R_BSP_WarmStart(bsp_warm_start_event_t event);
FSP_CPP_FOOTER

#define BUF_SIZE 9
uint8_t buf[BUF_SIZE] = {0};

void delay(int t);
void delay(int t) {
    R_BSP_SoftwareDelay(t, BSP_DELAY_UNITS_MILLISECONDS);
}

/*******************************************************************************************************************//**
 * main() is generated by the RA Configuration editor and is used to generate threads if an RTOS is used.  This function
 * is called by main() when no RTOS is used.
 **********************************************************************************************************************/
void hal_entry(void)
{
    fsp_err_t err;
        uint16_t distance, strength;

        // Open UART channel
        err = R_SCI_UART_Open(&g_uart0_ctrl, &g_uart0_cfg);
        if (FSP_SUCCESS != err) {
            APP_PRINT("UART open failed\r\n");
            while(1); // Halt in case of failure
        }

        while (1) {
            // Read data from UART
            err = R_SCI_UART_Read(&g_uart0_ctrl, buf, BUF_SIZE);
            if (FSP_SUCCESS == err && buf[0] == 0x59 && buf[1] == 0x59) {
                distance = (uint16_t)(buf[2] + buf[3] * 256);
                strength = (uint16_t)(buf[4] + buf[5] * 256);

                APP_PRINT("Distance: %u cm, strength: %u\r\n", distance, strength);
            }

            R_BSP_SoftwareDelay(10, BSP_DELAY_UNITS_MILLISECONDS); // Delay 10 ms
        }

#if BSP_TZ_SECURE_BUILD
    /* Enter non-secure code */
    R_BSP_NonSecureEnter();
#endif
}

/*******************************************************************************************************************//**
 * This function is called at various points during the startup process.  This implementation uses the event that is
 * called right before main() to set up the pins.
 *
 * @param[in]  event    Where at in the start up process the code is currently at
 **********************************************************************************************************************/
void R_BSP_WarmStart(bsp_warm_start_event_t event)
{
    if (BSP_WARM_START_RESET == event)
    {
#if BSP_FEATURE_FLASH_LP_VERSION != 0

        /* Enable reading from data flash. */
        R_FACI_LP->DFLCTL = 1U;

        /* Would normally have to wait tDSTOP(6us) for data flash recovery. Placing the enable here, before clock and
         * C runtime initialization, should negate the need for a delay since the initialization will typically take more than 6us. */
#endif
    }

    if (BSP_WARM_START_POST_C == event)
    {
        /* C runtime environment and system clocks are setup. */

        /* Configure pins. */
        R_IOPORT_Open (&g_ioport_ctrl, &IOPORT_CFG_NAME);
    }
}

#if BSP_TZ_SECURE_BUILD

FSP_CPP_HEADER
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ();

/* Trustzone Secure Projects require at least one nonsecure callable function in order to build (Remove this if it is not required to build). */
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ()
{

}
FSP_CPP_FOOTER

#endif
