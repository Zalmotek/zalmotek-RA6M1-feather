#include "hal_data.h"
#include "adc.h"
#include "Adafruit_NeoPixel.h"


// Which pin on the board is connected to the NeoPixels?
#define PIN (BSP_IO_PORT_03_PIN_02) // Port 03 Pin 02 (D5)

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS 1

// When setting up the NeoPixel library, we tell it how many pixels,
// and which pin to use to send signals. Note that for older NeoPixel
// strips you might need to change the third parameter -- see the
// strandtest example for more information on possible values.

#define DELAYVAL 500 // Time (in milliseconds) to pause between pixels

FSP_CPP_HEADER
void R_BSP_WarmStart(bsp_warm_start_event_t event);
FSP_CPP_FOOTER

//void delay(int t);
//void delay(int t) {
//    R_BSP_SoftwareDelay(t, BSP_DELAY_UNITS_MILLISECONDS);
//}

/*******************************************************************************************************************//**
 * main() is generated by the RA Configuration editor and is used to generate threads if an RTOS is used.  This function
 * is called by main() when no RTOS is used.
 **********************************************************************************************************************/
void hal_entry(void)
{
    /* TODO: add your own code here */

    beginTimer();

    Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
    pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)

    R_BSP_PinAccessEnable();
    R_BSP_PinWrite(BSP_IO_PORT_01_PIN_02, BSP_IO_LEVEL_HIGH);
    R_BSP_PinWrite(BSP_IO_PORT_01_PIN_03, BSP_IO_LEVEL_HIGH);
    R_BSP_PinWrite(BSP_IO_PORT_01_PIN_04, BSP_IO_LEVEL_HIGH);

    double adc_volt;
    int adc_val;

    while (true) {
        APP_PRINT("It works!\n");

            adc_val = analogRead(0, &adc_volt);
            APP_PRINT("ADC0 raw val: "); APP_PRINT("%d\n",adc_val);
            adc_val = analogRead(1, &adc_volt);
            APP_PRINT("ADC1 raw val: "); APP_PRINT("%d\n",adc_val);
            adc_val = analogRead(2, &adc_volt);
            APP_PRINT("ADC2 raw val: "); APP_PRINT("%d\n",adc_val);
            adc_val = analogRead(5, &adc_volt);
            APP_PRINT("ADC5 raw val: "); APP_PRINT("%d\n",adc_val);
            adc_val = analogRead(6, &adc_volt);
            APP_PRINT("ADC6 raw val: "); APP_PRINT("%d\n",adc_val);
            adc_val = analogRead(7, &adc_volt);
            APP_PRINT("ADC7 raw val: "); APP_PRINT("%d\n",adc_val);
            delay(150);

            APP_PRINT("micros() value: %d\n", micros());
            APP_PRINT("seconds value: %d.%d\n", micros() / 1000000, (micros() / 1000) % 1000);
            R_BSP_SoftwareDelay(1000, BSP_DELAY_UNITS_MILLISECONDS);

            pixels.clear(); // Set all pixel colors to 'off'

            // The first NeoPixel in a strand is #0, second is 1, all the way up
            // to the count of pixels minus one.
            for(int i = 0; i < NUMPIXELS; i++) { // For each pixel...

                // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255
                // Here we're using a moderately bright green color:
                pixels.setPixelColor(i, pixels.Color(255,120,0));
                pixels.show();   // Send the updated pixel colors to the hardware.
                //delay(DELAYVAL); // Pause before next pass through loop
            }
    }

#if BSP_TZ_SECURE_BUILD
    /* Enter non-secure code */
    R_BSP_NonSecureEnter();
#endif
}

/*******************************************************************************************************************//**
 * This function is called at various points during the startup process.  This implementation uses the event that is
 * called right before main() to set up the pins.
 *
 * @param[in]  event    Where at in the start up process the code is currently at
 **********************************************************************************************************************/
void R_BSP_WarmStart(bsp_warm_start_event_t event)
{
    if (BSP_WARM_START_RESET == event)
    {
#if BSP_FEATURE_FLASH_LP_VERSION != 0

        /* Enable reading from data flash. */
        R_FACI_LP->DFLCTL = 1U;

        /* Would normally have to wait tDSTOP(6us) for data flash recovery. Placing the enable here, before clock and
         * C runtime initialization, should negate the need for a delay since the initialization will typically take more than 6us. */
#endif
    }

    if (BSP_WARM_START_POST_C == event)
    {
        /* C runtime environment and system clocks are setup. */

        /* Configure pins. */
        R_IOPORT_Open (&IOPORT_CFG_CTRL, &IOPORT_CFG_NAME);

#if BSP_CFG_SDRAM_ENABLED

        /* Setup SDRAM and initialize it. Must configure pins first. */
        R_BSP_SdramInit(true);
#endif
    }
}

#if BSP_TZ_SECURE_BUILD

FSP_CPP_HEADER
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ();

/* Trustzone Secure Projects require at least one nonsecure callable function in order to build (Remove this if it is not required to build). */
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ()
{

}
FSP_CPP_FOOTER

#endif
